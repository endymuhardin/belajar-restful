angular.module('ngUpload',[]).directive('uploadSubmit',['$parse',function($parse){function getParentNodeByTagName(element,tagName){element=angular.element(element);var parent=element.parent();tagName=tagName.toLowerCase();if(parent&&parent[0].tagName.toLowerCase()===tagName){return parent}else{return!parent?null:getParentNodeByTagName(parent,tagName)}}return{restrict:'AC',link:function(scope,element,attrs){var options={};options.enableControls=attrs.uploadOptionsEnableControls;if(attrs.hasOwnProperty("uploadOptionsConvertHidden")){options.convertHidden=attrs.uploadOptionsConvertHidden!="false"}var form=getParentNodeByTagName(element,'form');var fn=$parse(attrs.uploadSubmit);if(!angular.isFunction(fn)){var message="The expression on the ngUpload directive does not point to a valid function.";throw message+"\n"}element.bind('click',function($event){if($event){$event.preventDefault=true}if(element.attr('disabled')){return}var iframe=angular.element("<iframe id='upload_iframe' name='upload_iframe' border='0' width='0' height='0' style='width: 0px; height: 0px; border: none; display: none' />");form.parent().append(iframe);iframe.bind('load',function(){var nativeIframe=iframe[0];var iFrameDoc=nativeIframe.contentDocument||nativeIframe.contentWindow.document;var content=iFrameDoc.body.innerHTML;var objContent=$(content);try{content=JSON.parse(objContent.html())}catch(e){if(console){console.log('WARN: XHR response is not valid json')}}if(!scope.$$phase){scope.$apply(function(){fn(scope,{content:content,completed:true})})}else{fn(scope,{content:content,completed:true})}if(content!==""){setTimeout(function(){iframe.remove()},250)}element.attr('disabled',null);element.attr('title','Click to start upload.')});if(!scope.$$phase){scope.$apply(function(){fn(scope,{content:"Please wait...",completed:false})})}else{fn(scope,{content:"Please wait...",completed:false})}var enabled=true;if(!options.enableControls){element.attr('disabled','disabled');enabled=false}element.attr('title',(enabled?'[ENABLED]: ':'[DISABLED]: ')+'Uploading, please wait...');if(options.convertHidden){angular.forEach(form.find('input'),function(element){element=angular.element(element);if(element.attr('ng-model')&&element.attr('type')&&element.attr('type')=='hidden'){element.attr('value',scope.$eval(element.attr('ng-model')))}})}form[0].submit()}).attr('title','Click to start upload.')}}}]).directive('ngUpload',['$parse','$document',function($parse,$document){function getMetaTagWithName(name){var head=$document.find('head');var match;angular.forEach(head.find('meta'),function(element){if(element.getAttribute('name')===name){match=element}});return angular.element(match)}return{restrict:'AC',link:function(scope,element,attrs){var options={};if(attrs.hasOwnProperty("uploadOptionsEnableRailsCsrf")){options.enableRailsCsrf=attrs.uploadOptionsEnableRailsCsrf!="false"}element.attr("target","upload_iframe");element.attr("method","post");var separator=element.attr("action").indexOf('?')==-1?'?':'&';element.attr("action",element.attr("action")+separator+"_t="+new Date().getTime());element.attr("enctype","multipart/form-data");element.attr("encoding","multipart/form-data");if(options.enableRailsCsrf){var input=angular.element("<input />");input.attr("class","upload-csrf-token");input.attr("type","hidden");input.attr("name",getMetaTagWithName('csrf-param').attr('content'));input.val(getMetaTagWithName('csrf-token').attr('content'));element.append(input)}}}}]);